# -*- coding: utf-8 -*-
"""Mini Project- malaria

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPsEjb_4Ineu4oeWXX2KuEOh1n07pHnu
"""

import numpy as np
import keras
import os
import cv2
import tensorflow
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Dense,Flatten, Dropout

from PIL import Image
import pandas as pd

data=[]
labels=[]

Parasitized=os.listdir("../content/cell_images/Parasitized")
Uninfected=os.listdir("../content/cell_images/Uninfected")

Uninfected

for filename in Parasitized:
  try:
      image=cv2.imread("../content/cell_images/Parasitized/" + filename)
      image_from_array=Image.fromarray(image,'RGB')
      size_image=image_from_array.resize((50,50))
      data.append(np.array(size_image))
      labels.append(1)
  except AttributeError:
      print("")

for filename in Uninfected:
  try:
      image=cv2.imread("../content/cell_images/Uninfected/" + filename)
      image_from_array=Image.fromarray(image,'RGB')
      size_image=image_from_array.resize((50,50))
      data.append(np.array(size_image))
      labels.append(0)
  except AttributeError:
      print("")

data

Cells=np.array(data)
labels=np.array(labels)

Cells

s=np.arange(Cells.shape[0])
np.random.shuffle(s)
Cells=Cells[s]
labels=labels[s]

num_classes=len(np.unique(labels))
len_data=len(Cells)

from sklearn.model_selection import train_test_split

labels=keras.utils.to_categorical(labels, num_classes)
Cells=Cells/255
x_train,x_test,y_train,y_test=train_test_split(Cells,labels,test_size=0.33,random_state=42)

model=Sequential()
model.add(Conv2D(filters=16, kernel_size=2, padding="same", activation="relu", input_shape=(50,50,3)))
model.add(MaxPooling2D(pool_size=2))
model.add(Conv2D(filters=32, kernel_size=2, padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=2))
model.add(Conv2D(filters=64,kernel_size=2,padding="same",activation="relu"))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0,2))
model.add(Flatten())
model.add(Dense(500,activation="relu"))
model.add(Dense(2,activation="softmax"))
model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(x_train,y_train,batch_size=50,epochs=20,verbose=1)

accuracy=model.evaluate(x_test, y_test)

print('\n, Test Accuracy', accuracy)